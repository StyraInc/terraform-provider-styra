// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type LibrariesV1LibraryEntityExpanded struct {
	Datasources   []SystemsV1DatasourceConfig     `json:"datasources"`
	Description   string                          `json:"description"`
	ID            string                          `json:"id"`
	Metadata      *MetaV2ObjectMeta               `json:"metadata,omitempty"`
	Policies      []SystemsV1PolicyConfig         `json:"policies"`
	ReadOnly      bool                            `json:"read_only"`
	SourceControl *LibrariesV1SourceControlConfig `json:"source_control,omitempty"`
	UsedBy        []LibrariesV1SystemUsingLibrary `json:"used_by,omitempty"`
}

func (o *LibrariesV1LibraryEntityExpanded) GetDatasources() []SystemsV1DatasourceConfig {
	if o == nil {
		return []SystemsV1DatasourceConfig{}
	}
	return o.Datasources
}

func (o *LibrariesV1LibraryEntityExpanded) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *LibrariesV1LibraryEntityExpanded) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LibrariesV1LibraryEntityExpanded) GetMetadata() *MetaV2ObjectMeta {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *LibrariesV1LibraryEntityExpanded) GetPolicies() []SystemsV1PolicyConfig {
	if o == nil {
		return []SystemsV1PolicyConfig{}
	}
	return o.Policies
}

func (o *LibrariesV1LibraryEntityExpanded) GetReadOnly() bool {
	if o == nil {
		return false
	}
	return o.ReadOnly
}

func (o *LibrariesV1LibraryEntityExpanded) GetSourceControl() *LibrariesV1SourceControlConfig {
	if o == nil {
		return nil
	}
	return o.SourceControl
}

func (o *LibrariesV1LibraryEntityExpanded) GetUsedBy() []LibrariesV1SystemUsingLibrary {
	if o == nil {
		return nil
	}
	return o.UsedBy
}
